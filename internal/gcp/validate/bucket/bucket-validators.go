package bucket

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"regexp"
	"strings"

	"cloud.google.com/go/storage"
	"google.golang.org/api/googleapi"
)

// StorageClient interfaces part of struct Client from package cloud.google.com/go/storage (for unit testing purposes)
type StorageClient interface {
	Bucket(string) *storage.BucketHandle
}

// CheckExist ensures that bucket does not already exist
func CheckExist(ctx context.Context, bucketName string, storageClient StorageClient) error {

	// Use autogenerated bucket name
	if bucketName == "" {
		return nil
	}

	fmt.Println("Calling Bucket")
	bucket := storageClient.Bucket(bucketName)
	_, err := bucket.Attrs(ctx)

	// Bucket does not exist
	if err == storage.ErrBucketNotExist {
		return nil
	}

	// Bucket exists and user has access to it
	if err == nil {
		failMsg := "Bucket already exists, and you have permission to access it"
		return errors.New(failMsg)
	}

	// Bucket exists and user does not have access to it
	if errGoogleAPI, ok := err.(*googleapi.Error); ok && errGoogleAPI.Code == http.StatusForbidden {
		failMsg := "Bucket already exists, but you do not have permission to access it"
		return errors.New(failMsg)
	}

	// Something else went wrong (but the bucket does not exist, so validator should pass)
	return nil
}

// LegalChars ensures that bucket name only contains legal characters: lower-case letters, numbers, dashes (-), underscores (_), and periods (.)
func LegalChars(bucketName string) error {

	// Use autogenerated bucket name
	if bucketName == "" {
		return nil
	}

	pattern := "^[a-z0-9._-]+$"

	if match, _ := regexp.MatchString(pattern, bucketName); !match {
		failMsg := "Bucket names must contain only lowercase letters, numbers, dashes (-), underscores (_), and periods (.)"
		return errors.New(failMsg)
	}

	return nil
}

// StartAndEndAlphanumeric ensures that bucket name starts and ends with a digit or lower-case letter
func StartAndEndAlphanumeric(bucketName string) error {

	// Use autogenerated bucket name
	if bucketName == "" {
		return nil
	}

	startPattern := "^[a-z0-9]"

	failMsg := "Bucket names must start and end with a number or letter"

	if match, _ := regexp.MatchString(startPattern, bucketName); !match {
		return errors.New(failMsg)
	}

	endPattern := "[a-z0-9]$"

	if match, _ := regexp.MatchString(endPattern, bucketName); !match {
		return errors.New(failMsg)
	}

	return nil
}

// Length ensures that bucket name length is 3-63 characters
func Length(bucketName string) error {

	// Use autogenerated bucket name
	if bucketName == "" {
		return nil
	}

	if len(bucketName) < 3 || len(bucketName) > 63 {
		failMsg := "Bucket names must contain 3 to 63 characters"
		return errors.New(failMsg)
	}

	return nil
}

// IllegalSubstrings ensures that bucket name does not contain illegal substrings
func IllegalSubstrings(bucketName string) error {
	// Use autogenerated bucket name
	if bucketName == "" {
		return nil
	}

	if strings.HasPrefix(bucketName, "goog") {
		failMsg := "Bucket names cannot begin with the 'goog' prefix"
		return errors.New(failMsg)
	}

	return nil
}
